# 接口是非常有用的概念，可以辅助我们的抽象思考。在现实生活中，当我们想起某个用具的时候，往往想到的是该用具的功能性接口。比如杯子，我们想到加水和喝水的可能性，高于想到杯子的材质和价格。也就是说，一定程度上，用具的接口等同于用具本身。内部细节则在思考过程中被摒弃。

# 在public和private的封装机制，我们实际上同时定义了类和接口，类和接口混合在一起。Java还提供了 interface 这一语法。这一语法将接口 从类的具体定义中剥离出来，构成一个独立的主体。

# 不需要定义方法的主体

# 不需要说明方法的可见性

# 方法默认public：：一个类的 public方法 构成了一个接口；

# 一旦在类中实施了某个接口，必须在该类中定义接口的所有方法

# 接口是一个标准： 
    好处是 更高质量；更容易推广
