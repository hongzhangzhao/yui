# 通过封装对象的成员（成员变量和方法），从而只允许从外部调用部分的成员；
  利用封装，可以提高对象的易用性和安全性

# 封装是：保留有限的外部（接口），隐藏具体的实施细节；

# 一个Java软件产品与一个日常产品相同。一个对象内部可以有许多成员(数据成员和方法)。有一些数据成员和方法只是内部使用。这时，我们会希望有一个给对象“加壳”的机制，从而封装对象。这样，用户可以比较容易学习和使用外部的接口，而不必接触内部成员。

# Java通过三个关键字来控制对象的成员的 外部可见性(visibility) : public , private , protected

# public: 该成员外部可见，即该成员为接口的一部分;

# private: 该成员外部不可见，只能用于内部使用，无法从外部访问。

# 内部方法可以调用private 成员