----------类型转换----------

>>> 
    * MVC框架都是属于表现层的解决方案，都需要负责收集用户请求参数，
      并将请求参数传递给控制器，
    
    * 所有的请求参数只能是字符串类型的，Java是强类型语言，MVC框架
      应该提供数据类型转换的功能
    
    * struts2提供了强大的数据类型转换机制。它基于OGNL表达式，
      HTML输入项命名为合法的OGNL表达式就可以充分利用s2的类型转换机制
    
    * s2提供了很好的扩展性
        - 方便开发自己的类型转换器
        - 转换过程中抛出异常，不需要关心，s2给搞定
<<<

# 类型转换的意义
    * 参数通过浏览器发送到服务器，参数只能是字符串类型的，需要在服务器端进行类型转换
    * 客户端输入的参数需要封装Bean对象，所以需要把请求参数转换成对应Bean对象属性的类型

# 表现层数据处理

    > 数据类型转换
    > 数据校验
    
    * 表现层用来和用户交互
        - 收集用户输入的数据(输入数据)
            * 只支持字符串类型(需要转换)
        - 向用户呈现服务器状态数据(输出数据)
            * 支持多种数据类型的输出(无需转换)
    
    * 数据校验分为客户端和服务端
        客户端：拒绝误操作输入提交到服务器处理，降低服务器端负担
        服务端：防止非法数据侵入，导致程序异常，数据库的异常，保证程序有效运行，数据完整的手段
        
    * 类型转换
        
# 使用类型转换器
    * 将字符串转换成复杂对象

# 系统需求
    * 定义需要转换到的对象类型(POJO)
    * 在Action中定义该POJO的成员属性，类型转换器会自动为该成员属性初始化
    
# 实现类型转换器
    * 基于OGNL实现的
    * 必须实现OGNL项目中的TypeConverter接口
        - com.opensymphony.xwork2.conversion.TypeConverter
        - 需要实现该接口的方法过于复杂，所以提供了它的实现类：com.opensymphony.xwork2.conversion.impl.DefaultTypeConverter
            * 需要重写convertValue方法：该方法需要完成双向转换
            
    * 当字符串向对象转换时，value参数为什么是一个字符串数组，而不是字符串
        - 原因是要考虑最通用的情形
        - 底层调用的请求对象的getParameterValues()方法
        
# 局部类型转换器：
    * 类型转换器需要注册在Web应用中，s2才能使用它，三种注册方式：
        - 注册局部类型转换器：只对某个Action的特定属性起作用
        - 注册全局类型转换器：对所有Action的特定属性起作用
        - 使用JDK 1.5的注释来注册类型转换器
        
    * 注册文件ActionName-conversion.properties
        内容：
            * Key=Action属性名
            * Value=转换器全限定类名
        放置在对应Action同一个目录下
    
    * 当用户提交参数时，Action的属性首先被类型转换器处理
    
# 全局类型转换器：
    * 在多个Action中都含有同类型需要转换的属性时使用
    * 同一个Action中有多个同类型属性，可以使用一个局部类型转换器注册文件完成注册
    * 全局转换器文件：xwork-conversion.properties
        - 内容：复合类型(对象类型)=对应类型转换器
        - 它将对所有该类型的属性起作用
        
    * 符合日期格式的字符串，会被s2转换成Date类型
        - s2内建了一些类型转换器
        
# 基于Struts2的类型转换器
    * 