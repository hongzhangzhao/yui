----------文件的上传和下载----------

>>>
    * 用户提交的请求参数一般为字符串类型，通过设置enctype=multipart/form-data属性，改变为二进制编码方式提交参数
    * 二进制参数无法通过getParameter方法获取，使用二进制流来获取(实现文件上传的方式)
    ! 这种上传文件的方式麻烦，Java领域有两个文件上传项目Common-FileUpload和COS：
        - s2在此基础上进一步简化文件上传
        - 只用通过三个属性封装表单里的文件域就能搞定文件上传
    * 文件下载(stream结果类型)，可以下载非西欧字符文件名的文件，下载前检查用户权限，控制下载
<<<

# 文件上传的原理

# 表单元素的enctype属性
    * 表单的enctype属性指定的是表单数据的编码方式，三个取值：
        - application/x-www-form-urlencoded：
            * 默认方式，只处理表单域value属性值，将表单域的值处理成URL编码方式
        - multipart/form-data：
            * 以二进制流的方式处理表单数据，将文件域指定的文件内容一并封装到请求参数中
        - text/plain：
            * action="mailto:URL",直接通过表单发送邮件
            
    * application/x-www-form-urlencoded：
        >>
          对请求参数处理的底层方式为二进制流，
          它获取一个字符串，其中包含所有参数的name和value，
          submit也当成一个表单域被转换成请求参数，
          这种方式对中文的参数需要解码和编码：
                * URLDecoder类：URLDecoder.decode(String, "GBK")
                * URLEncoder类：URLEncoder.encode(String, "GBK")
        
          底层的问题交给Web服务器搞定，使用getParameter()即可获得正确参数
        <<
        * 只能获取字符串类型的参数，不能上传文件
        
    * multipart/form-data：
        * 实现文件上传
        * 把文件域的文件内容作为请求参数
        ! getParameter方法无法获取请求参数
        
# 手动上传
    * 程序手动获取请求参数，并解析内容，就无需使用框架
    * 字符流只能处理文本文件，字节流没有限制
    
    * 文件上传框架：
        - 分析请求二进制流
        - 解析流中全部表单域
        - 分析表单域类型(文件域或普通域)
        - 允许开发者以简单的方式获取文件域内容字节、文件名、文件内容，也可以获取其它表单域的值
        
# 使用上传框架完成上传
    * 对于Java常用文件上传框架：
        - Common-FileUpload
        - COS
        > 它们负责解析请求中所有域(普通或文件)
        
    * Common-FileUpload：
        * Apache组织下jakarta-commons项目组下的一个小项目
        * 方便将multipart/form-data类型请求中的各种表单域解析出来
        * 依赖Common-IO项目
        * Struts2自带相应jar包
        
        * API
            * FileTtem = 表单域(普通或文件)
                - isFormField：判断表单域的类型
                - getFieldName：获取表单域value属性值
                * 针对文件域的方法：
                    - getName：获取文件名
                    - getContentType：获取文件类型
                    - get：获取文件内容字节
                    - getInputStream：获取上传文件的输入流
                    
    * COS：
        * oreilly组织下的一个小项目
        * 比Common-FileUpload更加方便
        
        * API
            - 核心类MultipartParser：解析请求，取出请求中全部表单域
            - Part类：代表所有表单域
                * getName：获取表单域name属性值
                * 子类ParamPart：普通表单域
                    - getStringValue：获取表单域value属性值
                * 子类FilePart：文件域
                    - getFileName：获取上传的文件名
                    - getFilePath：获取上传文件的路径
                    - getContentType：获取上传文件的类型
                    
# Struts2的文件的文件上传
    > s2使用其他的请求解析器，以此做了进一步的封装来简化文件上传
                
# Struts2提供的文件上传支持
    * 配置上传解析器struts.properties：
        * struts.multipart.parser=cos/pell/jakarta(默认)
        * 方便切换不同文件上传框架
    ! struts2默认使用jakarta原因是它俩是同一组织
    * s2支持在原有的文件上传项目上做进一步封装，简化代码实现，取消不同文件上传项目的编程差异
    
# 实现文件上传的Action
    * Action不负责处理请求参数
    * s2负责解析请求参数
    * s2使用File类型封装文件域
    >>> Action：封装属性
        File xxx：文件域(文件内容)!它无法获得文件名和文件类型
        String contentType：文件类型
        String fileName：文件名
        String savePath：文件保存路径：配置文件action的param子元素设置路径<param name="savePath">/path</param>
            > 通过配置文件动态控制保存路径，典型的依赖注入
        ! 提供对应setter和getter方法
        * execute方法：
            建立文件域的输入流
            建立保存文件的输出流
            一读、一写
    <<<
    ! s2的属性：
        * 封装请求参数
        * 封装Action处理结果
        * 通过配置文件赋值
        
# 配置文件上传的Action
    * struts.xml
        * 和配置普通的Action没什么不同，体现s2设计简单
        * 动态给Action属性赋值的action子元素param
        * 处理中文请求参数<constant name="struts.i18n.encoding" value="GBK"/>
    * web.xml
        - org.apache.struts2.dispatcher.ActionContextCleanUp：这个类在2.5版本取消了，原因没查到
            * 在上传文件时不配置这个类会出现一些未知异常(它是整合Sitemesh用的，和文件上传本没关系)
            * 它是FilterDispatcher的辅助类
    * 输出上传的文件：
        <img src="<s:property value="'文件域属性/' + 文件名属性"/>" />
    ! s2实现文件上传关键：使用何种解析器对开发者透明
        * 使用三个属性封装文件名(Stirng)、文件类型(String)、文件内容(File)
        
# 手动实现文件过滤
    >
        * 用户不能自由上传文件，尤其是可执行文件(可能是病毒)
        * 可上传图片、压缩文件
        * 限制上传文件的大小
        ! 必须在文件上传中对文件过滤
    <
    @文件类型过滤：
    * 在Action中创建封装过滤条件的属性：取值由配置文件动态指定
        - <param name="属性名">image/bmp,image/png,image/gif,image/jpeg</param>，  允许上传的文件类型
    * 创建处理过滤逻辑的方法：需要返回逻辑视图名，以便在匹配失败进行下一步的操作
    
    @ 文件大小过滤：和过滤文件类型差不多
    * 文件大小通过File属性的length方法获得
    * 允许的大小和上传文件的大小进行比对来完成过滤
    
# 拦截器实现文件过滤
    * s2提供文件上传的过滤器：fileUpload(FU)，需要在Action中配置启用
    * 指定FU参数：
        - allowedTypes：指定允许上传的类型，多个类型以逗号隔开
        - maximumSize：指定大小限制，单位字节
        >>>
            <interceptor-ref name="fileUpload"> 
                <param name="allowedTypes">image/bmp,image/png,image/gif,image/jpeg</param> 
                <param name="maximumSize">20000</param> 
            </interceptor-ref> 
        <<<
    * 过滤失败自动转入input逻辑视图：要提供对应的物理视图
    ! 显示为该Action配置defaultStack的拦截器引用: 过滤文件大小和文件内容必须显示引用
        - <interceptor-ref name="defaultStack"/>
        
# 输出错误提示
    * 当上传失败时应该给出友好的错误提示
    * 页面中添加<s:fielderror/>输出错误提示，需要导入标签库
    * 提示信息是系统默认的，可以使用国际化信息替换globalMessages.properties：
        struts.messages.error.content.type.not.allowed=提示不可以上传的文件类型
        struts.messages.error.file.too.large=提示文件大小超出限制
        struts.messages.error.uploading=除上面两种情况外的未知错误提示信息
        
# 文件上传的常量配置
    * s2在文件上传过程中需要指定临时文件夹：保存上传的临时文件
        * struts.multipart.saveDir属性设置临时文件夹：如果不设置使用默认路径javax.servlet.context.tempdir
        * struts.multipart.maxSize属性设置整个表单请求内容的最大字节数
        * struts.properties或者struts.xml中设置
        
# 同时上传多个文件
    >>> 为每个文件域都提供关键的三个属性：代码臃肿，编程复杂化
        * 使用数组和List处理
# 使用数组同时上传多个文件
    * 以数组形式封装多个文件域
    * 它们的name属性取值相同
    * 把关键的三个属性类型设为数组类型
    * 在execute方法中获取封装上传文件内容的数组属性完成上传和保存
    
# 使用List同时上传多个文件
    * 与使用组数没太大区别，只是把数组类型替换成List类型，注意要设置泛型
    
# 文件下载
    >>> stream结果类型用来下载文件，需要指定一个inputName参数(输入流)它是被下载文件的入口；
        可控制下载权限和非西欧字符文件名的文件下载；
    
# 使用Struts2控制文件下载
    ! 通过超连接的href="文件名"下载文件(文件名是中文就不行了)，下载前没办法过滤检查
        - 中文名无法下载可以通过s2来下载
    
# 实现文件下载的Action
    * 需要提供一个返回InputStream流的方法作为被下载文件的入口--------------------
    * 封装文件路径的属性，和setter方法，在配置文件中给定值                      |
                                                                                |    
# 配置Action                                                                    |      
    * 需要加入download拦截器引用                                                |     
    * 配置stream结果类型：                                                      |   
        - <result name="success" type="stream">                                 |
                <param name="contentType">application/zip</param>：指定文件类型 |
                <param name="inputName">targetFile</param>：返回的入口输入流----|
                <param name="contentDisposition">filename="struts-gif.zip"</param>：文件名
                <param name="bufferSize">4096</param>：下载文件时的缓冲大小
            </result>
    ! stream结果类型不用指定物理视图，所以不要location属性，必须指定inputName属性，它指向要下载的文件
    * 这种方式可下载中文名文件 
    
# 下载前的授权控制
    * 在用户下载文件前检查是否有权限下载该文件
    * 在execute方法中加入判断逻辑
    * 这里只是简单的判断用户是否处在登入状态